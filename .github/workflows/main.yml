name: Create and Publish NuGet Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # This ensures that all tags are fetched

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Get latest Git tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')
          echo "Latest tag: $TAG"
          echo "##[set-output name=tag;]$TAG"

      - name: Calculate next version
        id: set_version
        run: |
          # Remove the 'v' prefix and split the version into components
          VERSION=${{ steps.get_tag.outputs.tag }}
          VERSION=${VERSION#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment the patch version
          PATCH=$((PATCH + 1))
          
          # Construct the new version with pre-release label
          NEW_VERSION="$MAJOR.$MINOR.$PATCH-alpha.${{ github.run_number }}"
          echo "New version: $NEW_VERSION"
          echo "##[set-output name=new_version;]$VERSION"

      - name: Update version in .csproj
        run: |
          sed -i 's/<Version>*<\/Version>/<Version>${{ steps.set_version.outputs.new_version }}<\/Version>/' ./nomsol.core.api/nomsol.core.api.csproj

      - name: Restore dependencies
        run: dotnet restore ./nomsol.core.api/nomsol.core.api.csproj
  
      - name: Build the project
        run: dotnet build ./nomsol.core.api/nomsol.core.api.csproj --configuration Release --no-restore
  
      - name: Pack NuGet package
        run: dotnet pack ./nomsol.core.api/nomsol.core.api.csproj --configuration Release --no-build --output ./nupkgs

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./nupkgs/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
